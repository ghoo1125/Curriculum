//
// This file is generated by parsec-rdl-gen (development version)
// WILL NOT be auto-generated if file has already existed.
//
package yahoo.ec;

import yahoo.ec.parsec_generated.ResourceContext;
import yahoo.ec.parsec_generated.CurriculumHandler;
import yahoo.ec.parsec_generated.CoursesResponse;
import yahoo.ec.parsec_generated.Course;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

// DynamoDB
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import software.amazon.awssdk.services.dynamodb.model.DynamoDbException;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;
import software.amazon.awssdk.services.dynamodb.model.ScanRequest;
import software.amazon.awssdk.services.dynamodb.model.ScanResponse;

import java.net.URISyntaxException;
import java.net.URI;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;

/**
 * CurriculumHandlerImpl is interface implementation that implement CurriculumHandler interface.
 */
public class CurriculumHandlerImpl implements CurriculumHandler {

    @Override
    public CoursesResponse getCourses(ResourceContext context) {
        final String COURSE_TABLE_NAME = "Course";
        final String LIST_COURSES_INDEX_NAME = "ListAllCourses";

        try {
            // FIXME Should setup DynamoDB with region when deploy to AWS.
            DynamoDbClient ddb = DynamoDbClient.builder().endpointOverride(
                new URI("http://localhost:8000")).build();

            ScanRequest scanReq = ScanRequest.builder()
                .tableName(COURSE_TABLE_NAME)
                .indexName(LIST_COURSES_INDEX_NAME)
                .build();
            ScanResponse scanRes = ddb.scan(scanReq);

            CoursesResponse courseRes = new CoursesResponse();
            List<Course> courseList = new ArrayList<Course>();

            for (Map<String, AttributeValue> map : scanRes.items()) {
                Course course = new Course();

                if (map.get("TeacherId") != null) {
                    course.setTeacherId(map.get("TeacherId").s());
                }
                if (map.get("CourseName") != null) {
                    course.setCourseName(map.get("CourseName").s());
                }
                if (map.get("TeacherName") != null) {
                    course.setTeacherName(map.get("TeacherName").s());
                }
                if (map.get("MaxSeats") != null) {
                    course.setMaxSeats(
                        Integer.parseInt(map.get("MaxSeats").n()));
                }

                courseList.add(course);
            }

            courseRes.setCourses(courseList);
            courseRes.setResultsTotal(courseList.size());
            return courseRes;
        } catch (DynamoDbException e) {
            System.out.println(e.getMessage());
            return null;
        } catch(URISyntaxException e) {
            System.out.println(e.getMessage());
            return null;
        }
    }

    @Override
    public ResourceContext newResourceContext(HttpServletRequest request, HttpServletResponse response) {
        return new DefaultResourceContext(request, response);
    }
}
