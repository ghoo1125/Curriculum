//
// This file is generated by parsec-rdl-gen (development version)
// WILL NOT be auto-generated if file has already existed.
//
package com.yahoo.ec;

import com.yahoo.ec.parsec_generated.ResourceException;
import com.yahoo.ec.parsec_generated.Student;
import com.yahoo.ec.parsec_generated.Course;

import com.ning.http.client.AsyncHandler;
import com.yahoo.parsec.clients.DefaultAsyncCompletionHandler;
import com.yahoo.parsec.clients.ParsecAsyncHttpClient;
import com.yahoo.parsec.clients.ParsecAsyncHttpRequest;
import com.yahoo.parsec.clients.ParsecAsyncHttpRequest.Builder;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.core.UriBuilder;
import java.net.URI;

import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

public class CurriculumClientImpl implements CurriculumClient {

    /** Logger. */
    private static final Logger LOGGER = LoggerFactory.getLogger(CurriculumClientImpl.class);

    /** ParsecAsyncHttpClient. */
    private final ParsecAsyncHttpClient parsecAsyncHttpClient;

    /** Object mapper */
    private final ObjectMapper objectMapper;

    /** URL. */
    private String url;

    /** Headers. */
    private final Map<String, String> headers;

    /**
     * connection timeout.
     */
    private static final int IDLE_CONNECTION_TIMEOUT_IN_MS = 15000;

    /**
     * total connections.
     */
    private static final int MAXIMUM_CONNECTIONS_TOTAL = 50;

    public CurriculumClientImpl(
        String url,
        Map<String, String> headers
    ) {

        ParsecAsyncHttpClient client  = null;
        try {
            client = new ParsecAsyncHttpClient.Builder()
                .setAcceptAnyCertificate(true)
                .setAllowPoolingConnections(true)
                .setPooledConnectionIdleTimeout(IDLE_CONNECTION_TIMEOUT_IN_MS)
                .setMaxConnections(MAXIMUM_CONNECTIONS_TOTAL)
                .build();
        } catch (ExecutionException e) {
            LOGGER.error("create ParsecAsyncHttpClient failed. " + e.getMessage());
            throw new ResourceException(ResourceException.INTERNAL_SERVER_ERROR, e.getMessage());
        }
        this.parsecAsyncHttpClient = client;
        this.objectMapper = new ObjectMapper();
        this.url = url;
        this.headers = headers;
    }

    public CurriculumClientImpl(
            ParsecAsyncHttpClient client,
            ObjectMapper objectMapper,
            String url,
            Map<String, String> headers
    ) {
        this.parsecAsyncHttpClient = client;
        this.objectMapper = objectMapper;
        this.url = url;
        this.headers = headers;
    }

    private ParsecAsyncHttpRequest getRequest(String method, URI uri, String body) throws ResourceException {
        Builder builder = new Builder();

        builder.setUri(uri);
        if (headers != null) {
            for (Map.Entry<String, String> entry : headers.entrySet()) {
                builder.addHeader(entry.getKey(), entry.getValue());
            }
        }

        builder.setMethod(method);

        builder.setBody(body).setBodyEncoding("UTF-8");

        ParsecAsyncHttpRequest request = null;
        try {
            request = builder.build();
        } catch (Exception e) {
            LOGGER.error("builder build failed: " + e.getMessage());
            throw new ResourceException(ResourceException.INTERNAL_SERVER_ERROR, e.getMessage());
        }
        return request;
    }

    @Override
    public CompletableFuture<Course> getCourse(String studentId) throws ResourceException {
        String path = "/courses";
        String body = null;

        URI uri = UriBuilder.fromUri(url).path(path)
                            .queryParam("studentId", studentId)
                            .build();
        ParsecAsyncHttpRequest request = getRequest("GET", uri, body);


        AsyncHandler<Course> asyncHandler = new DefaultAsyncCompletionHandler<>(Course.class);

        return parsecAsyncHttpClient.criticalExecute(request, asyncHandler);
    }

    @Override
    public CompletableFuture<String> postCourse(Course user) throws ResourceException {
        String path = "/courses";
        String body = null;

        try {
            body = objectMapper.writeValueAsString(user);
        } catch (JsonProcessingException e) {
            LOGGER.error("JsonProcessingException: " + e.getMessage());
            throw new ResourceException(ResourceException.INTERNAL_SERVER_ERROR, e.getMessage());
        }

        URI uri = UriBuilder.fromUri(url).path(path)
                            .build();
        ParsecAsyncHttpRequest request = getRequest("POST", uri, body);


        AsyncHandler<String> asyncHandler = new DefaultAsyncCompletionHandler<>(String.class);

        return parsecAsyncHttpClient.criticalExecute(request, asyncHandler);
    }

}
